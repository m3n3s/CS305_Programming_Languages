(define twoOperatorCalculator 
	(lambda (expr) 
		(cond
			((null? expr) #f)
			((and (eq? (length expr) 1) (number? (car expr))) (car expr))
			((eq? (length expr) 2) #f)
			((not (number? (car expr))) #f)
			((not (or (eq? (cadr expr) '+)  (eq? (cadr expr) '-))) #f)
			((not (number? (caddr expr))) #f)
			((eq? (length expr) 3)
				(cond 
					((eq? (cadr expr) '+) (+ (car expr) (caddr expr)))
					((eq? (cadr expr) '-) (- (car expr) (caddr expr)))
					(else #f)
				)
			)
			((eq? (cadr expr) '+) 
				(twoOperatorCalculator(cons (+ (car expr) (caddr expr)) (cdddr expr)))
			)
			((eq? (cadr expr) '-) 
				(twoOperatorCalculator(cons (- (car expr) (caddr expr)) (cdddr expr)))
			)
			(else #f)
		)
	)
)
 
(define fourOperatorCalculator 
	(lambda(expr) 
		(cond 
			((null? expr) #f)
			((eq? (length expr) 2) #f)
			((and (eq? (length expr) 1) (number? (car expr))) (list (car expr)))
			((not (number? (car expr))) #f)
			((not (number? (caddr expr))) #f)
			((or (eq? (cadr expr) '+) (eq? (cadr expr) '-)) 
				(cons (car expr) (cons (cadr expr) (fourOperatorCalculator (cddr expr))))
			)
			((eq? (cadr expr) '*) 
				(fourOperatorCalculator (cons (* (car expr) (caddr expr)) (cdddr expr)))
			)
			((eq? (cadr expr) '/) 
				(if (eq? (caddr expr) 0)
					#f
					(fourOperatorCalculator (cons (/ (car expr) (caddr expr)) (cdddr expr)))
				)
			)
			(else #f)
		)
	)
)

(define calculatorNested
	(lambda(expr)
		(cond
			((null? expr) #f)
			((and (eq? (length expr) 1) (number? (car expr))) 
				(list (car expr))
			)
			((and (list? (car expr)) (not (null? (cdr expr)))) 
				(cons (twoOperatorCalculator (fourOperatorCalculator (calculatorNested (car expr)))) (cons (cadr expr) (calculatorNested (cddr expr))))
			)
			((and (list? (car expr)) (null? (cdr expr))) 
				(list (twoOperatorCalculator (fourOperatorCalculator (calculatorNested (car expr)))))
			)
			((and (not (list? (car expr))) (not (null? (cdr expr)))) 
				(cons (car expr) (cons (cadr expr) (calculatorNested (cddr expr))))
			)
			(else (list (car expr)))
		)
	)
)

(define checkOperators
	(lambda(expr)
		(cond
			((null? expr) #f)
			((number? expr) #f)
			((and (list? (car expr)) (null? (cdr expr))) (checkOperators (car expr)))
			((and (list? (car expr)) (not (null? (cdr expr)))) 
				(and (checkOperators (car expr)) (checkOperators (cdr expr)))
			)
			((and (number? (car expr)) (not (null? (cdr expr)))) 
				(if (not (number? (cadr expr)))
				   (checkOperators (cdr expr))
				   #f
				)
			)
			((and (number? (car expr)) (null? (cdr expr))) #t)
			((not (and (or (eq? (car expr) '+) (eq? (car expr) '-) (eq? (car expr) '*) (eq? (car expr) '/ )) (not (number? (car expr))))) #f)
			((and (or (eq? (car expr) '+) (eq? (car expr) '-) (eq? (car expr) '*) (eq? (car expr) '/ )) (not (null? (cdr expr)))) (checkOperators (cdr expr)))
			((and (or (eq? (car expr) '+) (eq? (car expr) '-) (eq? (car expr) '*) (eq? (car expr) '/ )) (null? (cdr expr))) #f)
			(else #t)
		)
	)
)

(define calculator
	(lambda(expr)
		(cond
			((null? expr) #f)
			(else 
				(if (checkOperators expr)
					(twoOperatorCalculator (fourOperatorCalculator (calculatorNested expr)))
					#f
				)
			)
		)
	)
)